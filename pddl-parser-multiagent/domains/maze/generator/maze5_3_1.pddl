(define (problem maze5_3_1) (:domain maze)
(:objects
	a1 a2 a3 a4 a5 - agent
	loc1x1 loc1x2 loc1x3 loc2x1 loc2x2 loc2x3 loc3x1 loc3x2 loc3x3 - location
	d1 d2 d3 d4 d5 d6 - door
	- bridge
	bt1 bt2 bt3 bt4 bt5 bt6 - boat
	s1 s2 s3 s4 - switch
)
(:init
	(at a1 loc2x2)
	(at a2 loc1x2)
	(at a3 loc1x2)
	(at a4 loc2x3)
	(at a5 loc1x1)
	(has-door d1 loc1x1 loc1x2)
	(has-door d1 loc1x2 loc1x1)
	(has-door d2 loc1x1 loc2x1)
	(has-door d2 loc2x1 loc1x1)
	(blocked loc1x1 loc2x1)
	(blocked loc2x1 loc1x1)
	(has-switch s1 loc1x1 loc1x1 loc2x1)
	(has-door d3 loc1x2 loc1x3)
	(has-door d3 loc1x3 loc1x2)
	(blocked loc1x2 loc1x3)
	(blocked loc1x3 loc1x2)
	(has-switch s2 loc2x1 loc1x2 loc1x3)
	(has-door d4 loc1x2 loc2x2)
	(has-door d4 loc2x2 loc1x2)
	(has-door d5 loc1x3 loc2x3)
	(has-door d5 loc2x3 loc1x3)
	(blocked loc1x3 loc2x3)
	(blocked loc2x3 loc1x3)
	(has-switch s3 loc2x3 loc1x3 loc2x3)
	(has-boat bt1 loc2x1 loc2x2)
	(has-boat bt1 loc2x2 loc2x1)
	(has-door d6 loc2x1 loc3x1)
	(has-door d6 loc3x1 loc2x1)
	(blocked loc2x1 loc3x1)
	(blocked loc3x1 loc2x1)
	(has-switch s4 loc2x1 loc2x1 loc3x1)
	(has-boat bt2 loc2x2 loc2x3)
	(has-boat bt2 loc2x3 loc2x2)
	(has-boat bt3 loc2x2 loc3x2)
	(has-boat bt3 loc3x2 loc2x2)
	(has-boat bt4 loc2x3 loc3x3)
	(has-boat bt4 loc3x3 loc2x3)
	(has-boat bt5 loc3x1 loc3x2)
	(has-boat bt5 loc3x2 loc3x1)
	(has-boat bt6 loc3x2 loc3x3)
	(has-boat bt6 loc3x3 loc3x2)
)
(:goal (and
	(at a1 loc1x2)
	(at a2 loc3x2)
	(at a3 loc2x2)
	(at a4 loc3x2)
	(at a5 loc3x1)
))
)
