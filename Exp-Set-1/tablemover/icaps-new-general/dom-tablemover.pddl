(define (domain tablemover)
(:requirements :typing :conditional-effects :multi-agent :concurrency-network)
(:types agent table room)
(:predicates
	(lifting ?a - agent ?t - table)
	(inroom ?t - table ?r - room)
	(in ?a - agent ?r - room)
	(connected ?r1 - room ?r2 - room)
	(intact ?t - table) 
	(has-charging-point ?r - room)
	(available ?a - agent)	
	(charged ?a - agent)
	(same-agent ?a1 - agent ?a2 - agent)
)
(:action move-agent
	:agent ?a - agent 
	:parameters (?r1 - room ?r2 - room)
	:precondition (and
					(in ?a ?r1)
					(connected ?r1 ?r2)
					(available ?a)					
				  )
	:effect	(and
					(not (in ?a ?r1))
					(in ?a ?r2)
				 )
)
(:action charge-agent
	:agent ?a - agent
	:parameters (?r - room)
	:precondition (and
					(in ?a ?r)
					(has-charging-point ?r)
					(not (charged ?a))
				  )
	:effect	(and
				(charged ?a)
			)
)
(:action move-table 
	:agent ?a - agent
	:parameters (?t - table ?r1 - room ?r2 - room)
	:precondition (and
					(lifting ?a ?t)
					(in ?a ?r1)
					(connected ?r1 ?r2)
					(charged ?a)
				  )
	:effect	(and				
				(not (in ?a ?r1))
				(in ?a ?r2)		
				(not (charged ?a))
			)
)
(:action 2-move-table 
	:agent ?a - agent
	:parameters (?a1 - agent ?t - table ?r1 - room ?r2 - room)
	:precondition (and
					(lifting ?a ?t)
					(lifting ?a1 ?t)
					(in ?a ?r1)
					(in ?a1 ?r1)
					(connected ?r1 ?r2)
					(charged ?a)
					(charged ?a1)
					(not (same-agent ?a ?a1))
				  )
	:effect	(and
					(not (in ?a ?r1))
					(not (in ?a1 ?r1))
					(in ?a ?r2)	
					(in ?a1 ?r2)
				 )
)
(:action 3-move-table 
	:agent ?a - agent
	:parameters (?a1 - agent ?a2 - agent ?t - table ?r1 - room ?r2 - room)
	:precondition (and
					(lifting ?a ?t)
					(lifting ?a1 ?t)
					(lifting ?a2 ?t)
					(in ?a ?r1)
					(in ?a1 ?r1)
					(in ?a2 ?r1)
					(connected ?r1 ?r2)
					(charged ?a)
					(charged ?a1)
					(charged ?a2)
					(not (same-agent ?a ?a1))
					(not (same-agent ?a ?a2))
					(not (same-agent ?a2 ?a1))
				  )
	:effect	(and
					(not (in ?a ?r1))
					(not (in ?a1 ?r1))
					(not (in ?a2 ?r1))
					(in ?a ?r2)	
					(in ?a1 ?r2)
					(in ?a2 ?r2)
				 )
)
(:action lift-table
	:agent ?a - agent
	:parameters (?t - table ?r1 - room)
	:precondition (and
					(available ?a)
					(in ?a ?r1)
					(inroom ?t ?r1)
					(intact ?t)					
					(charged ?a)					
				  )
	:effect	(and
					(lifting ?a ?t)
					(not (available ?a))
					(not (inroom ?t ?r1))
					(not ( intact ?t))					
				 )
)
(:action 2-lift-table
	:agent ?a - agent
	:parameters (?a1 - agent ?t - table ?r1 - room)
	:precondition (and
					(available ?a)
					(available ?a1)
					(in ?a ?r1)
					(in ?a1 ?r1)
					(inroom ?t ?r1)	
					(intact ?t)		
					(charged ?a)
					(charged ?a1)
					(not (same-agent ?a ?a1))				
				  )
	:effect	(and
					(lifting ?a ?t)
					(lifting ?a1 ?t)
					(not (available ?a))
					(not (available ?a1))
					(not (inroom ?t ?r1))	
					(intact ?t)					
				 )
)
(:action 3-lift-table
	:agent ?a - agent
	:parameters (?a1 - agent ?a2 - agent ?t - table ?r1 - room)
	:precondition (and
					(available ?a)
					(available ?a1)
					(available ?a2)
					(in ?a ?r1)
					(in ?a1 ?r1)
					(in ?a2 ?r1)
					(inroom ?t ?r1)	
					(intact ?t)		
					(charged ?a)
					(charged ?a1)
					(charged ?a2)		
					(not (same-agent ?a ?a1))
					(not (same-agent ?a ?a2))
					(not (same-agent ?a2 ?a1))						
				  )
	:effect	(and
					(lifting ?a ?t)
					(lifting ?a1 ?t)
					(lifting ?a2 ?t)
					(not (available ?a))
					(not (available ?a1))
					(not (available ?a2))
					(not (inroom ?t ?r1))	
					(intact ?t)					
				 )
)
(:action drop-table
	:agent ?a - agent
	:parameters (?t - table ?r1 - room)
	:precondition (and
					(in ?a ?r1)
					(lifting ?a ?t)					
				  )
	:effect	(and
					(not (lifting ?a ?t))
					(inroom ?t ?r1)										
					(available ?a)
					(not ( intact ?t)) 
					(not (charged ?a))
				 )
)
(:action 2-drop-table
	:agent ?a - agent
	:parameters (?a1 - agent ?t - table ?r1 - room)
	:precondition (and
					(in ?a ?r1)
					(in ?a1 ?r1)
					(lifting ?a ?t)
					(lifting ?a1 ?t)
					(not (same-agent ?a ?a1))																												
				  )
	:effect	(and
					(not (lifting ?a ?t))
					(not (lifting ?a1 ?t))
					(inroom ?t ?r1)										
					(available ?a)
					(available ?a1)
					(intact ?t)
					(not (charged ?a))
					(not (charged ?a1))
			)	
)
(:action 3-drop-table
	:agent ?a - agent
	:parameters (?a1 - agent ?a2 - agent ?t - table ?r1 - room)
	:precondition (and
					(in ?a ?r1)
					(in ?a1 ?r1)
					(in ?a2 ?r1)
					(lifting ?a ?t)
					(lifting ?a1 ?t)
					(lifting ?a2 ?t)
					(not (same-agent ?a ?a1))
					(not (same-agent ?a ?a2))
					(not (same-agent ?a2 ?a1))																												
				  )
	:effect	(and
					(not (lifting ?a ?t))
					(not (lifting ?a1 ?t))
					(not (lifting ?a2 ?t))
					(inroom ?t ?r1)										
					(available ?a)
					(available ?a1)
					(available ?a2)
					(intact ?t)
					(not (charged ?a))
					(not (charged ?a1))
					(not (charged ?a2))
			)	
)
)

